#!/usr/bin/perl -w
# Author longqi mail:1218715400@qq.com

use strict;
use warnings;
use Getopt::Long;
use vars qw($panelPath $irPath $orderPath $edpd $uipath $help);
use vars qw(@seekdir @FolderWithinOneCustomer @TopDIRs @Types @Configs @Panels @Items);
use vars qw($dir1 $dir2 $dir3 $dir4);

#============================================================================
#read parameters from command line
GetOptions(
	"panelfolder|P=s" => \$panelPath,
	"irfolder|R=s" => \$irPath,
	"orderfolder|O=s" => \$orderPath,
	"edpfolder|E=s" => \$edpd,
	"uifolder|UI=s" => \$uipath,
	"help|h" => \$help,
);

#============================================================================
#Sub function used to show usage for user
sub Usage
{
	print "Usage:$0 -P the path of panel folder -R the path of remote folder -O the path of order folder\n";
	exit 1;
}

#============================================================================
# output to file
# author longqi
sub Output2File($\@)
{
	my ($Outfile, $Content) = @_;

	open(OUTFILE, ">./tempFile") || die "$!\n";  # open file.

	my $cur = 0;
	my $items_count = @$Content;

	#Out put to given file
	while ($cur++ < $items_count)
	{
		print OUTFILE shift @$Content;
	}

	close(OUTFILE);

	#if content has changed, cover the origin file
	#print ("cmp -s $Outfile ./tempFile && rm -f ./tempFile || mv ./tempFile $Outfile\n");
	system "cmp -s $Outfile ./tempFile && rm -f ./tempFile || mv ./tempFile $Outfile";
}
#============================================================================
# author longqi

sub ParseDIR($$\@)
{
	my ($path, $ParseDir, $Result) = @_;
	my ($subpath, $subsubpath, $subhandle, $handle);

	if (-d $path)
	{
		if (opendir($handle, $path))
		{
			while ($subpath = readdir($handle))
			{
				if (!($subpath =~ m/^\.$/) and !($subpath =~ m/^\.\.$/) and !($subpath =~ m/^\.svn$/))
				{
					my $p = $path."/$subpath";
					if (-d $p && $ParseDir == 1) # match directory
					{
						if ($subpath !~ /objs/)
						{
							#print "--------Find Directory: $subpath\n";
							push @$Result, $subpath;
						}
					}
					elsif (-d $p && $ParseDir == 3) # match directory
					{
						if ($subpath !~ /engineerMenu/)
						{
							#print "--------Find Directory: $subpath\n";
							push @$Result, $subpath;
						}
					}
					elsif (-d $p && $ParseDir == 2) # match directory
					{
						if (!($subpath =~ /(tools)/) and !($subpath =~ /(common)/) and !($subpath =~ /(script)/) and !($subpath =~ /(app)/) )
						{
							#print "--------Find Directory: $subpath\n";
							push @$Result, $subpath;
						}
						elsif ($subpath =~ /(common)/)
						{
							if (opendir($subhandle, $p))
							{
								while($subsubpath = readdir($subhandle))
								{
									if (!($subsubpath =~ m/^\.$/) and !($subsubpath =~ m/^\.\.$/) and !($subsubpath =~ m/^\.svn$/) and !($subsubpath =~ /(board)/) and !($subsubpath =~ /(config)/) )
									{
										push @$Result, $subpath."/$subsubpath";
									}
								}
								closedir($subhandle);
							}
						}
					}
					elsif (-e $p && $ParseDir == 0) # match file
					{
						if ($subpath =~ /.*\.config$/)
						{
							#print "--------Find File: $subpath\n";
							push @$Result, $subpath;
						}
					}
				}
			}
			closedir($handle);
		}
		
		@$Result = sort @$Result;
	}
	else
	{
		print "we can't find your given path!\n" && exit 1;
	}
}

#============================================================================
# gen panel menu 
# author longqi
sub GenConfigMenu($$\@)
{
	my ($Path, $Types, $Configs) = @_;
	my ($parseConfig, @Content);
	push(@Content, "#\n# This file is automatically generated\n# \@Author Longqi mail:1218715400\@qq.com\n \n");
	push(@Content, "choice\n\tprompt \"".$Types." TYPE\"\n\n");
	foreach $parseConfig (@$Configs)
	{
		if ( $Types =~ /Order/ )
		{
			push(@Content, "\tconfig ".uc($parseConfig)."\n\t\tbool \"".$parseConfig."\" \n\n");
		}
		elsif ( $Types =~ /UI/ )
		{
			push(@Content, "\tconfig ".uc($parseConfig)."\n\t\tbool \"".$parseConfig."\" \n\n");
		}
		else
		{
			push(@Content, "\tconfig ".uc($parseConfig)."\n\t\tbool \"".substr($parseConfig, index($parseConfig,"_") + 1 )."\" \n\n");
		}
	}
	push(@Content, "endchoice\n");
	push(@Content, "config ".uc($Types)."S_TYPE\n");
	foreach $parseConfig (@$Configs)
	{
		push(@Content, "\tstring \n\tdefault \"".$parseConfig."\" if ".uc($parseConfig)."\n");
	}
	# print @Content;
	Output2File("$Path/Kconfig", @Content);
}

#============================================================================
# gen panel menu 
# ./genmenu.pl -O ../common/ -R ../common/ -P ../common/panel/
# author longqi
sub GenTopConfigMenu($\@)
{
	my ($Path, $TopDIRs) = @_;
	my ($parseDIR, @Content, @Kconfig);
	my ($parseItem);
	push(@Content, "#\n# This file is automatically generated\n# \@Author Longqi mail:1218715400\@qq.com\n \n");
	push(@Content, "config ISDB_SYSTEM\n");
	push(@Content, "\tbool \"Hikeen ISDB\"\n");
	push(@Content, "\tdefault n\n");
	foreach $parseDIR (@$TopDIRs)
	{
		@Items = ();
		if ( $parseDIR =~ /edpdrv/ )
		{
			ParseDIR($parseDIR, 1, @Items);
			GenConfigMenu($parseDIR, "EDP_CHIP", @Items);
			push(@Content, "source ".$parseDIR."/Kconfig\n");
			push(@Content, "config EDP_SUPPORT\n\tbool \n\tdefault y\n");
			push(@Content, "endif\n");
		}
		elsif ( $parseDIR =~ m/.*ui_script/ )
		{
			ParseDIR("$parseDIR", 3, @Items);
			GenConfigMenu("".$parseDIR."/", "UI", @Items);
			push(@Content, "if !ISDB_SYSTEM\n");
			push(@Content, "source ".$parseDIR."/Kconfig\n");
			push(@Content, "endif\n");
		}
		else
		{
			ParseDIR("$Path".$parseDIR."/", 1, @Items);
			GenConfigMenu("$Path".$parseDIR."/", "".uc(substr($parseDIR, index($parseDIR,"/") + 1 ,1)).substr($parseDIR, index($parseDIR,"/") + 2)."", @Items);
			push(@Content, "source $Path".$parseDIR."/Kconfig\n");
		}
### add epd driver		
		if ( $parseDIR =~ /panel/ )
		{
			push(@Content, "if NONE_HEAD");
			foreach $parseItem (@Items)
			{
				if ( $parseItem =~ /EDP/ )
				{
					push(@Content, " || ".uc($parseItem)."");
				}
			}
			push(@Content, "\n");
		}
	}
	# print @Content;
	Output2File("$Path/Kconfig", @Content);
}


#============================================================================
# gen panel menu 
# author longqi
sub GenPanelHead($\@)
{
	my ($Path, $Panels) = @_;
	my ($parsePanel, @Content);
	push(@Content, "/**\n * This file is automatically generated\n * \@Author Longqi mail:1218715400\@qq.com\n */\n");
	push(@Content, "#ifndef __HK_PANEL_H\n");
	push(@Content, "#define __HK_PANEL_H\n");
	foreach $parsePanel (@$Panels)
	{
		push(@Content, "#ifdef CONFIG_".uc($parsePanel)." \n");
		if (substr($parsePanel, rindex($parsePanel,"_") + 1) =~ /([0-9])([xX])([0-9])/)
		{
			push(@Content, "#define PANEL_NAME \"".substr($parsePanel, index($parsePanel,"_") + 1, rindex($parsePanel,"_") - index($parsePanel,"_") - 1 )."\"\n");
			push(@Content, "#define P_RESOLUTION \"".substr($parsePanel, rindex($parsePanel,"_") + 1)."\"\n");
		}
		else
		{
			push(@Content, "#define PANEL_NAME \"".substr($parsePanel, index($parsePanel,"_") + 1 )."\"\n");
			push(@Content, "#define P_RESOLUTION \"null\"\n");
		}
		push(@Content, "#include \"./$parsePanel/panel.h\" \n");
		push(@Content, "#endif \n\n");
	}
	push(@Content, "#endif /* __HK_PANEL_H */\n");
	# print @Content;
	Output2File("$Path/hk_panel.h", @Content);
}
#============================================================================
# gen customer main routine 
# author longqi

sub GenCustomer()
{
	Usage() if (defined $help or (defined $panelPath) == 0 or (defined $irPath) == 0 or (defined $orderPath) == 0 or (defined $edpd) == 0);
	ParseDIR($panelPath, 1, @seekdir);
#	GenConfigMenu($panelPath, "Panel", @seekdir);
	GenPanelHead($panelPath, @seekdir);
	@seekdir = ();
	my ($parsetmp, @seektmp);
	ParseDIR($orderPath, 2, @seektmp);
	foreach $parsetmp (@seektmp)
	{
		push(@seekdir, $parsetmp);
		if ( $parsetmp =~ /panel/ )
		{
			push(@seekdir, "$edpd");
		}
	}
	push(@seekdir, "$uipath");
	# print "@seekdir\n";
	GenTopConfigMenu($orderPath, @seekdir);
	# GenConfigMenu($edpd, "EDPD", @seekdir);
	# print "@seekdir\n";
}

GenCustomer();

exit 0;
















